/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package tic_tac_toe_backend.tic_tac_toe_backends;

import java.net.http.HttpResponse;
import tic_tac_toe_backend.tic_tac_toe_backends.utils.HTTPClient;
import tic_tac_toe_backend.tic_tac_toe_backends.utils.HTTPRequest;
import tic_tac_toe_backend.tic_tac_toe_backends.utils.SerializedBody;
import tic_tac_toe_backend.tic_tac_toe_backends.utils.SpeakeasyHTTPClient;

/**
 * Game Engine API for Tic Tac Toe: Game Engine API for Tic Tac Toe
 */
public class TicTacToeBackends {
	/**
	 * SERVERS contains the list of server urls available to the SDK.
	 */
	public static final String[] SERVERS = {
        "http://localhost:5000/",
        "https://localhost:5000/",
	};
	
	
	
  		

	private SDKConfiguration sdkConfiguration;

	/**
	 * The Builder class allows the configuration of a new instance of the SDK.
	 */
	public static class Builder {
		private SDKConfiguration sdkConfiguration = new SDKConfiguration();

		private Builder() {
		}

		/**
		 * Allows the default HTTP client to be overridden with a custom implementation.
		 * @param client The HTTP client to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setClient(HTTPClient client) {
			this.sdkConfiguration.defaultClient = client;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL.
		 * @param serverUrl The server URL to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl) {
			this.sdkConfiguration.serverUrl = serverUrl;
			return this;
		}
		
		/**
		 * Allows the overriding of the default server URL  with a templated URL populated with the provided parameters.
		 * @param serverUrl The server URL to use for all requests.
		 * @param params The parameters to use when templating the URL.
		 * @return The builder instance.
		 */
		public Builder setServerURL(String serverUrl, java.util.Map<String, String> params) {
			this.sdkConfiguration.serverUrl = tic_tac_toe_backend.tic_tac_toe_backends.utils.Utils.templateUrl(serverUrl, params);
			return this;
		}
		
		/**
		 * Allows the overriding of the default server by index
		 * @param serverIdx The server to use for all requests.
		 * @return The builder instance.
		 */
		public Builder setServerIndex(int serverIdx) {
			this.sdkConfiguration.serverIdx = serverIdx;
			this.sdkConfiguration.serverUrl = SERVERS[serverIdx];
			return this;
		}
		
		/**
		 * Builds a new instance of the SDK.
		 * @return The SDK instance.
		 * @throws Exception Thrown if the SDK could not be built.
		 */
		public TicTacToeBackends build() throws Exception {
			if (this.sdkConfiguration.defaultClient == null) {
				this.sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
			}
			
			if (this.sdkConfiguration.securityClient == null) {
				this.sdkConfiguration.securityClient = this.sdkConfiguration.defaultClient;
			}
			
			if (this.sdkConfiguration.serverUrl == null || this.sdkConfiguration.serverUrl.isBlank()) {
				this.sdkConfiguration.serverUrl = SERVERS[0];
				this.sdkConfiguration.serverIdx = 0;
			}

			if (this.sdkConfiguration.serverUrl.endsWith("/")) {
				this.sdkConfiguration.serverUrl = this.sdkConfiguration.serverUrl.substring(0, this.sdkConfiguration.serverUrl.length() - 1);
			}
			
			return new TicTacToeBackends(this.sdkConfiguration);
		}
	}

	/**
	 * Get a new instance of the SDK builder to configure a new instance of the SDK.
	 * @return The SDK builder instance.
	 */
	public static Builder builder() {
		return new Builder();
	}

	private TicTacToeBackends(SDKConfiguration sdkConfiguration) throws Exception {
		this.sdkConfiguration = sdkConfiguration;
	}

    /**
     * Root endpoint.
     * &lt;br/&gt;Returns the package name and version.&lt;br/&gt;&lt;br/&gt;
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public tic_tac_toe_backend.tic_tac_toe_backends.models.operations.GetResponse get() throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = tic_tac_toe_backend.tic_tac_toe_backends.utils.Utils.generateURL(baseUrl, "/");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        tic_tac_toe_backend.tic_tac_toe_backends.models.operations.GetResponse res = new tic_tac_toe_backend.tic_tac_toe_backends.models.operations.GetResponse(contentType, httpRes.statusCode()) {{
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (tic_tac_toe_backend.tic_tac_toe_backends.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Root endpoint.
     * &lt;br/&gt;Returns the package name and version.&lt;br/&gt;&lt;br/&gt;
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public tic_tac_toe_backend.tic_tac_toe_backends.models.operations.GetVersionResponse getVersion() throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = tic_tac_toe_backend.tic_tac_toe_backends.utils.Utils.generateURL(baseUrl, "/version");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("GET");
        req.setURL(url);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        tic_tac_toe_backend.tic_tac_toe_backends.models.operations.GetVersionResponse res = new tic_tac_toe_backend.tic_tac_toe_backends.models.operations.GetVersionResponse(contentType, httpRes.statusCode()) {{
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (tic_tac_toe_backend.tic_tac_toe_backends.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }

    /**
     * Games endpoint. Creates the next game state from the previous game state.
     * &lt;br/&gt;Accepts a GameState and Move.&lt;br/&gt;&lt;br/&gt;Returns a Move including the before and after GameStates.&lt;br/&gt;
     * @param request the request object containing all of the parameters for the API call
     * @return the response from the API call
     * @throws Exception if the API call fails
     */
    public tic_tac_toe_backend.tic_tac_toe_backends.models.operations.PutGamesResponse putGames(byte[] request) throws Exception {
        String baseUrl = this.sdkConfiguration.serverUrl;
        String url = tic_tac_toe_backend.tic_tac_toe_backends.utils.Utils.generateURL(baseUrl, "/games");
        
        HTTPRequest req = new HTTPRequest();
        req.setMethod("PUT");
        req.setURL(url);
        SerializedBody serializedRequestBody = tic_tac_toe_backend.tic_tac_toe_backends.utils.Utils.serializeRequestBody(request, "request", "raw");
        if (serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        req.setBody(serializedRequestBody);

        req.addHeader("Accept", "*/*");
        req.addHeader("user-agent", String.format("speakeasy-sdk/%s %s %s %s", this.sdkConfiguration.language, this.sdkConfiguration.sdkVersion, this.sdkConfiguration.genVersion, this.sdkConfiguration.openapiDocVersion));
        
        HTTPClient client = this.sdkConfiguration.defaultClient;
        HttpResponse<byte[]> httpRes = client.send(req);

        String contentType = httpRes.headers().firstValue("Content-Type").orElse("application/octet-stream");

        tic_tac_toe_backend.tic_tac_toe_backends.models.operations.PutGamesResponse res = new tic_tac_toe_backend.tic_tac_toe_backends.models.operations.PutGamesResponse(contentType, httpRes.statusCode()) {{
            body = null;
        }};
        res.rawResponse = httpRes;
        
        if (httpRes.statusCode() == 200) {
            if (tic_tac_toe_backend.tic_tac_toe_backends.utils.Utils.matchContentType(contentType, "*/*")) {
                byte[] out = httpRes.body();
                res.body = out;
            }
        }

        return res;
    }
}